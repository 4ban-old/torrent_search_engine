Pudge
=====

Легенда
-------

Пудж - жадный и тупой мясник с крюком.

Способности:

* **Meat Hook** - запускает кровавый крюк в направлении URL. Крюк цепляет URL и тащит его к Пуджу, нанося урон и разрывая его на http - заголовки (в виде словаря) и html (в виде текста)

* **Dismember** - Пудж вгрызается в HTML, выводя его из строя и нанося урон в течение времени, выгрызая durls (ссылки на другие страницы домена) и dfiles (файлы домена)

* **Rot** - токсичное облако, которое наносит интенсивный магический урон Базы Данных и замедляет движение, раня не только вражеских юнитов, но и самого Пуджа.

* **Flesh Heap** - дает Пуджу защиту от магического урона Базы Данных и бонус силы каждый раз, когда Пудж цепляет крюком URL.

Описание
--------
Pudge - это асинхронный http-клиент позволяющий читать содержимое страниц различных сайтов и находить ссылки на другие страницы того же сайта (паук). Настройки позволяют задать для каждого домена или части сайта свои правила поиска ссылок.

.. function:: meat_hook

Для каждого отдельного домена создается отдельная копия **meat_hook**, это позволяет обращаться к домену с определенной периодичностью. Большую часть времени **meat_hook** проводит в ожидании истечения указанного периода времени (`TIMEWAIT`_). **meat_hook** гарантирует, что Pudge не будет обращаться к одному домену чаще, чем указанный период ожидания, даже если домен имеет много "путей входа" и правил, для одного домена создается лишь одна копия meat_hook. Это возможно переопределить в настройках, но тогда контроль и ответственность за слишком частое обращение к одному ресурсу в сети ложится на ваши плечи.

.. function:: dismember

**dismember** хранит все настройки для доменов. На один домен возможно передать несколько входных путей и настроек, **meat_hook** не проверяет ссылки, которые ставятся в его очередь, этим занимается **dismember**. Получив все возможноые ссылки со страницы, **dismember** проверяет каждую на соответствие всем переданным для домена правилам и, если ссылка проходит хотябы одну проверку, она - валидна, будет записана в БД и поставлена в очередь **meat_hook** соответствующего домена.

.. function:: rot

**rot** формирует SQL-запросы для сохранения полученных данных в базу данных и, по достижении количества запросов переданного в переменной **DB['pack']**, совершает транзакцию. Если программа получает сигнал о завершении работы Pudge, Она собирает данные со всех очередей и сохраняет их. Если Pudge был остановлен и снова запущет, сохраненные данные позволяет Pudge продолжить работу с того места, где он был остановлен.

.. function:: flesh_heap

**flesh_heap** создается диспетчером задач первым. При инициализации **fleash_heap** создает копии остальных сопрограмм. В ходе работы он следит за состоянием очередей, временем ожидания, кодами ответов от web-серверов, при необходимости создает дополнительные копии сопрограм, увеличивает время между запросами к домену и т.п.

Режимы работы
~~~~~~~~~~~~~

1. **chop-chop** - Pudge просматривает заданные страницы, в зависимости от настроек сохраняет http заголовки, html и найденные ссылки относящиеся к домену с учетом настроек (durls)  и завершает работу.
2. **fresh meat** - Pudge начинает просмотр с заданной страницы (по-умолчания с корневой) и затем просматривает все найденные для домена ссылки, согласно настройкам (durls), проходя таким образом по всем страницам сайта (для которых возможно найти ссылки).

durls
-----

.. glossary::
    durls
        Domain URLs. Ссылки, найденные Пуджем, которые указывают
        на другие страницы того-же домена. 
    dfiles
        Domain files. Найденные Пуджем ссылки на файлы, находящиеся
        на томже домене.


Настройки
---------

Настройки для Pudge составляются в несколько этапов:

1. Беруться настройки со значениями по-умолчанию,

#. Читаются настройки из файла settings.py.

#. Если указан файл со своими настройками, читаются настройки из него.

#. Если передан словарь с настройками, то настройки читаются из него.

#. Парсятся строки с переданными настройками для каждого домена.

.. index:: ALLOW_SUBDOMAINS

ALLOW_SUBDOMAINS
~~~~~~~~~~~~~~~~

По-умолчанию: **False**

Учитывать ли при составлении :abbr:`durls (Domain URLs)` ссылки, ведущие на поддоменты.

----

ALLOW_PARENTDOMAINS
~~~~~~~~~~~~~~~~~~~

По-умолчанию: **False**

Учитывать ли при составлении :abbr:`durls (Domain URLs)` ссыллки, ведущие на родительские домены.

----

ALLOW_SUBPATH
~~~~~~~~~~~~~

По-умолчанию: **True**

Учитывать ли при составлении :abbr:`durls (Domain URLs)` ссыллки, ведущие на "папки" ниже.

----

ALLOW_PARENTPATH
~~~~~~~~~~~~~~~~

По-умолчанию: **True**

Учитывать ли при составлении :abbr:`durls (Domain URLs)` ссыллки, ведущие на "папки" выше.

----

PATH_POINT
~~~~~~~~~~

По-умолчанию: '/'

----

PATH_DEEP
~~~~~~~~~

По-умолчанию: **0**

Ограничение на "глубину" "папок" относительрно **PATH_POINT**. При значении **0** ограничение не работает.

----

MAKE_TREE
~~~~~~~~~

По-умолчанию: **False**

Составление карты сайта в виде графа.

----

MODE
~~~~

По-умолчанию: **chop-chop**

Режим работы Pudge.

.. hint:: `Режимы работы`_

.. _`Режимы работы`::

----

TIMEWAIT
~~~~~~~~

По-умолчанию: **500**

Задержка между обращениями к одному домену.

----

USER_AGENT
~~~~~~~~~~

По-умолчанию: **''**

Если **USER_AGENT** не определен (пустая строка), то Pudge сообщает собственное название и номер версии. Например "Mozilla/5.0 (compatible; Pudge/1.1;)".

----

SAVE_HTTP
~~~~~~~~~

По-умолчанию: **False**

Сохранять полученные http-заголовки.

----

SAVE_HTML
~~~~~~~~~

По-умолчанию: **False**

Сохранять полученную html-страницу.

----

SAVE_DURLS
~~~~~~~~~~

По-умолчанию: **
Сохранять найденные :abbr:`durls (Domain URLs)`.

----

DOMAINS
~~~~~~~

По-умолчанию: []

Список строк, где каждая строка представляет собой домен и настройки для него. Например **"domain=example.com, make_tree=True, save_html=True"**.
Параметр **domain** - обязателен. Фактически все возможные настройки совпадают в названии с перечисленными, но записываются в нижнем регистре. Нельзя для разных доменов определить разные настройки базы данных.

----

DB
~~

По-умолчанию: {}

Настройки для базы данных. Возможные ключи:

* **db** - вид базы данных
* **host** - хост, на котором запущена база данных
* **port** - порт, на котором работает база данных
* **database** - имя базы данных. По-умолчанию **pudge**
* **user** - пользователь базы данных (с правами чтения и записи). По-умолчанию **pudge**
* **password** - пароль пользователя базы данных. По-умолчанию **pudge**
* **autocommit** - использовать транзакции и ждать команды на выполнение всех полученных команд. По-умолчанию **False**
* **pack** - количество команд одной транзакции
* **table** - название таблицы
* **column** - название колонки.


.. _`TIMEWAIT`:: 